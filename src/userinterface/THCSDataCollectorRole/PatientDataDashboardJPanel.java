/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.THCSDataCollectorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.THCSEnterprise;
import Business.HealthCost.HealthCost;
import Business.Organization.Organization;
import Business.Organization.THCSDataCollectorOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HospitalInfoWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author akailasam
 */
public class PatientDataDashboardJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private THCSDataCollectorOrganization dcOrganization;
    private THCSEnterprise thcsEnterprise; 
    

    /**
     * Creates new form DataCollectorWorkAreaJPanel
     */
    public PatientDataDashboardJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business, Enterprise enterprise) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.dcOrganization = (THCSDataCollectorOrganization)organization;
        this.thcsEnterprise = (THCSEnterprise)enterprise;
        
        populateTable();
        
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)HealthCostTable.getModel();
        
        model.setRowCount(0);
        
        for(HealthCost hc : thcsEnterprise.getHcDirectory()){
            Object[] row = new Object[7];
            row[0] = hc.getHospitalName();
            row[1] = hc.getConsultationFee();
            row[2] = hc.getMriCost();
            row[3] = hc.getEegCost();
            row[4] = hc.getEcgCost();
            row[5] = hc.getxRayCost();
            row[6] = hc.getHeartBypassSurgery();
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        HealthCostTable = new javax.swing.JTable();
        createNewPatientDataJButton = new javax.swing.JButton();
        updateJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        RefreshJButton = new javax.swing.JButton();
        BackJButton = new javax.swing.JButton();

        HealthCostTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Hospital Name", "Consultation fee", "MRI", "EEG", "ECG", "X-Ray", "Heart Bypass Surgery"
            }
        ));
        jScrollPane1.setViewportView(HealthCostTable);

        createNewPatientDataJButton.setText("Create new patient data");
        createNewPatientDataJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewPatientDataJButtonActionPerformed(evt);
            }
        });

        updateJButton.setText("Update");
        updateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setText("delete");

        RefreshJButton.setText("Refresh");
        RefreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshJButtonActionPerformed(evt);
            }
        });

        BackJButton.setText("<<Back");
        BackJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(RefreshJButton)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deleteJButton)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(updateJButton)))
                            .addComponent(createNewPatientDataJButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(BackJButton)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(RefreshJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(createNewPatientDataJButton)
                .addGap(18, 18, 18)
                .addComponent(updateJButton)
                .addGap(18, 18, 18)
                .addComponent(deleteJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addComponent(BackJButton)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createNewPatientDataJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewPatientDataJButtonActionPerformed

        HospitalInfoWorkRequest request = new HospitalInfoWorkRequest();

//        request.setStatus("Processing");

        InfoProcessWorkRequestJPanel processWorkRequestJPanel = new InfoProcessWorkRequestJPanel(userProcessContainer, request, thcsEnterprise);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_createNewPatientDataJButtonActionPerformed

    private void updateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJButtonActionPerformed
//        int selectedRow = workRequestJTable.getSelectedRow();
//
//        if (selectedRow < 0){
//            return;
//        }
//
//        HospitalInfoWorkRequest request = (HospitalInfoWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
//
//        request.setStatus("Processing");
//
//        InfoProcessWorkRequestJPanel processWorkRequestJPanel = new InfoProcessWorkRequestJPanel(userProcessContainer, request, thcsEnterprise);
//        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        layout.next(userProcessContainer);
    }//GEN-LAST:event_updateJButtonActionPerformed

    private void RefreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_RefreshJButtonActionPerformed

    private void BackJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        DataCollectorWorkAreaJPanel pwajp = (DataCollectorWorkAreaJPanel) component;
        pwajp.populateTable();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BackJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackJButton;
    private javax.swing.JTable HealthCostTable;
    private javax.swing.JButton RefreshJButton;
    private javax.swing.JButton createNewPatientDataJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton updateJButton;
    // End of variables declaration//GEN-END:variables
}
